#include <stdio.h> 
#include <stdlib.h> 
 
struct Node { 
    int key; 
    struct Node* left; 
    struct Node* right; 
}; 
 


//creation.............




struct Node* createNode(int key) { 
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); 
    newNode->key = key; 
    newNode->left = newNode->right = NULL; 
    return newNode; 
} 
 




//insertion.........




struct Node* insert(struct Node* node, int key) { 
    if (node == NULL) { 
        return createNode(key);  // Create new node if root is NULL 
    } 
 
    if (key < node->key) { 
        node->left = insert(node->left, key);  // Insert in the left subtree 
    } else if (key > node->key) { 
        node->right = insert(node->right, key);  // Insert in the right subtree 
    } 
 
    return node; 
} 
 


//deletion..........



struct Node* deleteNode(struct Node* root, int key) { 
    if (root == NULL) { 
        return root; 
    } 
 
    if (key < root->key) { 
        root->left = deleteNode(root->left, key); 
    } else if (key > root->key) { 
        root->right = deleteNode(root->right, key); 
    } else { 
        if (root->left == NULL) { 
            struct Node* temp = root->right; 
            free(root); 
            return temp; 
        } else if (root->right == NULL) { 
            struct Node* temp = root->left; 
            free(root); 
            return temp; 
        } 
 
        struct Node* temp = minValueNode(root->right); 
        root->key = temp->key;  // Copy the inorder successor's value to this node 
        root->right = deleteNode(root->right, temp->key);  // Delete the inorder 
successor 
    } 
 
    return root; 
} 
  
void inorder(struct Node* root) { 
    if (root != NULL) { 
        inorder(root->left); 
        printf("%d ", root->key); 
        inorder(root->right); 
    } 
} 
 
int main() { 
    struct Node* root = NULL; 
  
    root = insert(root, 50); 
    root = insert(root, 30); 
    root = insert(root, 20); 
    root = insert(root, 40); 
    root = insert(root, 70); 
    root = insert(root, 60); 
    root = insert(root, 80); 
 
    printf("Inorder traversal after insertion: "); 
    inorder(root);  // Should print: 20 30 40 50 60 70 80 
    printf("\n"); 
  
    root = deleteNode(root, 20); 
    printf("Inorder traversal after deleting 20: "); 
    inorder(root);  // Should print: 30 40 50 60 70 80 
    printf("\n"); 
 
    root = deleteNode(root, 30); 
    printf("Inorder traversal after deleting 30: "); 
    inorder(root);  // Should print: 40 50 60 70 80 
    printf("\n"); 
 
    root = deleteNode(root, 50); 
    printf("Inorder traversal after deleting 50: "); 
    inorder(root);  // Should print: 40 60 70 80 
    printf("\n"); 
 
return 0; 
}
