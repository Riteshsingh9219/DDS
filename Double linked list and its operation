// creaate ........


#include <stdio.h> 
#include <stdlib.h> 
 
typedef struct Node { 
int data; 
struct Node* next; 
struct Node* prev; 
} Node; 

Node* createNode(int data) { 
Node* newNode = (Node*)malloc(sizeof(Node)); 
if (!newNode) { 
printf("Memory error\n"); 
return NULL; 
} 
newNode->data = data; 
newNode->next = NULL; 
newNode->prev = NULL; 
return newNode; 
} 




//insertion.......



void insertAtBeginning(Node** head, int data) { 
Node* newNode = createNode(data); 
if (!newNode) return; 
if (*head != NULL) { 
newNode->next = *head; 
(*head)->prev = newNode; 
} 
*head = newNode; 
printf("Inserted %d at the beginning\n", data); 
} 

....

void insertAtEnd(Node** head, int data) { 
Node* newNode = createNode(data); 
if (!newNode) return; 
if (*head == NULL) { 
*head = newNode; 
printf("Inserted %d at the end\n", data); 
return; 
} 
Node* temp = *head; 
while (temp->next != NULL) { 
temp = temp->next; 
    } 
    temp->next = newNode; 
    newNode->prev = temp; 
    printf("Inserted %d at the end\n", data); 
} 
 


//deletion.........



void deleteNode(Node** head, int key) { 
    if (*head == NULL) { 
        printf("List is empty\n"); 
        return; 
    } 
 
    Node* temp = *head; 
 
    if (temp != NULL && temp->data == key) { 
        *head = temp->next; 
        if (*head != NULL) { 
            (*head)->prev = NULL; 
        } 
        free(temp); 
        printf("Deleted %d from the list\n", key); 
        return; 
    } 
  
    while (temp != NULL && temp->data != key) { 
        temp = temp->next; 
    } 
 
    if (temp == NULL) { 
        printf("Key %d not found in the list\n", key); 
        return; 
    } 
 
    if (temp->next != NULL) { 
        temp->next->prev = temp->prev; 
    } 
    if (temp->prev != NULL) { 
        temp->prev->next = temp->next; 
    } 
    free(temp); 
    printf("Deleted %d from the list\n", key); 
} 
 


//taversing..........




void traverse(Node* head) { 
    if (head == NULL) { 
        printf("List is empty\n"); 
        return; 
    } 
 
    Node* temp = head; 
    printf("List elements: "); 
    while (temp != NULL) { 
        printf("%d ", temp->data); 
        temp = temp->next; 
    } 
    printf("\n"); 
} 
 



//searching.......



int search(Node* head, int key) { 
    Node* temp = head; 
    int position = 0; 
    while (temp != NULL) { 
        if (temp->data == key) { 
            printf("Element %d found at position %d\n", key, position); 
            return position; 
        } 
        temp = temp->next; 
        position++; 
    } 
    printf("Element %d not found in the list\n", key); 
    return -1; 
} 
 


//reverse..............



void reverse(Node** head) { 
    Node* temp = NULL; 
    Node* current = *head; 
 
    while (current != NULL) { 
        temp = current->prev; 
        current->prev = current->next; 
        current->next = temp; 
        current = current->prev; 
    } 
 
    if (temp != NULL) { 
        *head = temp->prev; 
    } 
    printf("List reversed\n"); 
} 
 
int main() { 
    Node* head = NULL; 
 
    insertAtBeginning(&head, 1); 
    insertAtBeginning(&head, 2); 
    insertAtEnd(&head, 3); 
    insertAtEnd(&head, 4); 
 
    traverse(head); 
 
    deleteNode(&head, 2); 
    traverse(head); 
 
    search(head, 3); 
    search(head, 5); 
 
    reverse(&head); 
    traverse(head); 
 
    return 0; 
} 
 
