#include <stdio.h> 
#include <stdlib.h> 

struct Node { 
int key; 
struct Node* left; 
struct Node* right; 
}; 



//creation........


struct Node* createNode(int key) { 
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); 
newNode->key = key; 
newNode->left = newNode->right = NULL; 
return newNode; 
} 




//insertion.........



struct Node* insert(struct Node* node, int key) { 
    if (node == NULL) { 
        return createNode(key); 
    } 
 
    if (key < node->key) { 
        node->left = insert(node->left, key); 
    } else if (key > node->key) { 
        node->right = insert(node->right, key);
    } 
 
    return node; 
} 
 


//preorder........



void preorder(struct Node* root) { 
    if (root != NULL) { 
        printf("%d ", root->key); 
        preorder(root->left);      
        preorder(root->right);    
    } 
} 



// Inorder ...........



void inorder(struct Node* root) { 
    if (root != NULL) { 
        inorder(root->left);      
        printf("%d ", root->key);
        inorder(root->right);      
    } 
} 




// Postorder..........



void postorder(struct Node* root) { 
    if (root != NULL) { 
        postorder(root->left);    
        postorder(root->right);    
        printf("%d ", root->key); 
    } 
} 


int main() { 
    struct Node* root = NULL; 
 
    root = insert(root, 50); 
    root = insert(root, 30); 
    root = insert(root, 20); 
    root = insert(root, 40); 
    root = insert(root, 70); 
    root = insert(root, 60); 
    root = insert(root, 80); 
 
    printf("Preorder traversal: "); 
    preorder(root);  
    printf("\n"); 
 
    printf("Inorder traversal: "); 
    inorder(root);   
    printf("\n"); 
 
    printf("Postorder traversal: "); 
    postorder(root); 
    printf("\n"); 
 
    return 0; 
}
